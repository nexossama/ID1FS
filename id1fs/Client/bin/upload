#!/usr/bin/env python3
import argparse
import logging
import os
import shutil
import sys

from helpers import backup_file, logger_config, exit_if_off, exit_if_disconnected, Paths, handle_main_add_node_size, \
    create_file_md, check_backup_file_exist, check_main_file_exist

# build upload command
parser = argparse.ArgumentParser()
parser.add_argument("path", help="path of file to upload", type=str)
parser.add_argument("name", help="name of file to be stored with", type=str)
args = parser.parse_args()

# logging command
logger_config()
command_elements = " ".join(sys.argv[1:])
command = f"upload {command_elements}"
logging.debug(f"Command used < {command} >")

# don't allow file creation if id1fs is off or no user is connected
exit_if_off()
exit_if_disconnected()

# forbid same name file upload
if check_main_file_exist(args.name) or check_backup_file_exist(args.name):
    print("Please choose another name")
    logging.error("Failed to upload --> another file with same name is already existing")
    sys.exit()

# execute upload process
node_path = Paths.get_best_main_path(args.path)
main_path = os.path.join(node_path, os.path.basename(args.path))
shutil.copy(args.path, node_path)
new_path = os.path.join(node_path, args.name)
os.rename(main_path, new_path)
create_file_md(args.name, node_path)
handle_main_add_node_size(new_path)
print(f"The file < {args.name} > is uploaded successfully")
logging.info(f"The file < {args.name} > is uploaded successfully")
backup_file(new_path)
