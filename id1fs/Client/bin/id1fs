#!/usr/bin/env python3
import argparse
import json
import logging
from helpers import *
import sys

# built id1fs command
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--status", help="Current status of the IDFS filesystem", action="store_true")
parser.add_argument("-o", "--on", help="Turn on the IDFS filesystem", action="store_true")
parser.add_argument("-q", "--quit", help="Turn off the IDFS filesystem", action="store_true")
parser.add_argument("-f", "--files", help="Show the list of files in the ID1FS", action="store_true")
args = parser.parse_args()

# logging command
logger_config()
command_elements = " ".join(sys.argv[1:])
command = f"id1fs {command_elements}"
logging.debug(f"Command used < {command} >")

# log wrong command usage
if len(used_args(args)) != 1:
    print("Wrong command usage , try < id1fs -h > for help")
    logging.error("Wrong command usage")
    sys.exit()
# turn-on id1fs
if args.on:
    if get_idfs_status() == "on":
        print("ID1FS is already on !!")
        logging.info("ID1FS is already on !!")
    else:
        print("\n",
              "-----------------------------------\n",
              "██╗██████╗░░░███╗░░███████╗░██████╗\n",
              "██║██╔══██╗░████║░░██╔════╝██╔════╝\n",
              "██║██║░░██║██╔██║░░█████╗░░╚█████╗░\n",
              "██║██║░░██║╚═╝██║░░██╔══╝░░░╚═══██╗\n",
              "██║██████╔╝███████╗██║░░░░░██████╔╝\n",
              "╚═╝╚═════╝░╚══════╝╚═╝░░░░░╚═════╝░\n"
              "-----------------------------------"
              )
        # check time synchronization
        if not check_time_sync():
            print("\nFailed to turn on --> Time configuration is required to use ID1FS\n")
            logging.error("Failed to turn on --> Time configuration is required to use ID1FS")
            sys.exit()

        turn_on()
        print("\tWelcome to ID1FS\n")

    # run background scripts[3]
    run_bg_script()

# quit id1fs
if args.quit:
    exit_if_off()
    if get_idfs_status() == "off":
        print("ID1FS is already off !!")
        logging.info("ID1FS is already off !!")
    else:
        turn_off()
        set_connected_user("system")
        print("ID1FS Turned off successfully")
        logging.info("ID1FS is already off !!")

# print id1fs status
if args.status:
    checking = check_time_sync()
    with open(Paths.get_idfs_status_path(), 'r') as f:
        data = json.load(f)

    for k, v in data.items():
        if v == "system":
            v = None
        print(k, ":", v)

    # warn user to configure the time
    if not checking:
        print("\nTime configuration is required to use ID1FS")

# print user files
if args.files:
    exit_if_not_configured()
    exit_if_off()
    exit_if_disconnected()
    nodes_names = get_nodes()
    filenames = []
    for node in nodes_names:
        for file in get_file_in_node(node):
            file_md = get_file_md(file)
            if get_connected_user() != file_md["Owner"]:
                continue
            if file in filenames:
                continue
            filenames.append(file)
    for file in filenames:
        print(file)
    print(f"{len(filenames)} files found")
